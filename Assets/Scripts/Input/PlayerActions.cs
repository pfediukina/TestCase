//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""04b445b7-be43-41c4-b75d-a525a61184b4"",
            ""actions"": [
                {
                    ""name"": ""Touch1"",
                    ""type"": ""Button"",
                    ""id"": ""5bf29229-afe2-44f7-885e-18a5ef977d4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch2"",
                    ""type"": ""Button"",
                    ""id"": ""e3c241fb-ce9e-42d7-a2e6-0558310a7ce4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Pos"",
                    ""type"": ""Value"",
                    ""id"": ""603f8f8b-f279-406a-8aac-537421e345b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch2Pos"",
                    ""type"": ""Value"",
                    ""id"": ""811eb478-09a5-4866-9286-e8d8bac99f76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""731cf089-2191-42db-b8c8-7c9ff56f8a72"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b93691-93ef-4b77-a39f-8dbbb274e7d1"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c399a56-9ce0-4b65-a73d-1aa2aa3e1662"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1fc848e-1a2d-4933-898d-918fdd3d70fe"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch2Pos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Touch1 = m_Touch.FindAction("Touch1", throwIfNotFound: true);
        m_Touch_Touch2 = m_Touch.FindAction("Touch2", throwIfNotFound: true);
        m_Touch_Touch1Pos = m_Touch.FindAction("Touch1Pos", throwIfNotFound: true);
        m_Touch_Touch2Pos = m_Touch.FindAction("Touch2Pos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_Touch1;
    private readonly InputAction m_Touch_Touch2;
    private readonly InputAction m_Touch_Touch1Pos;
    private readonly InputAction m_Touch_Touch2Pos;
    public struct TouchActions
    {
        private @PlayerActions m_Wrapper;
        public TouchActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch1 => m_Wrapper.m_Touch_Touch1;
        public InputAction @Touch2 => m_Wrapper.m_Touch_Touch2;
        public InputAction @Touch1Pos => m_Wrapper.m_Touch_Touch1Pos;
        public InputAction @Touch2Pos => m_Wrapper.m_Touch_Touch2Pos;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @Touch1.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1;
                @Touch1.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1;
                @Touch1.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1;
                @Touch2.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2;
                @Touch2.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2;
                @Touch2.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2;
                @Touch1Pos.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1Pos;
                @Touch1Pos.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1Pos;
                @Touch1Pos.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch1Pos;
                @Touch2Pos.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2Pos;
                @Touch2Pos.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2Pos;
                @Touch2Pos.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch2Pos;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch1.started += instance.OnTouch1;
                @Touch1.performed += instance.OnTouch1;
                @Touch1.canceled += instance.OnTouch1;
                @Touch2.started += instance.OnTouch2;
                @Touch2.performed += instance.OnTouch2;
                @Touch2.canceled += instance.OnTouch2;
                @Touch1Pos.started += instance.OnTouch1Pos;
                @Touch1Pos.performed += instance.OnTouch1Pos;
                @Touch1Pos.canceled += instance.OnTouch1Pos;
                @Touch2Pos.started += instance.OnTouch2Pos;
                @Touch2Pos.performed += instance.OnTouch2Pos;
                @Touch2Pos.canceled += instance.OnTouch2Pos;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTouch1(InputAction.CallbackContext context);
        void OnTouch2(InputAction.CallbackContext context);
        void OnTouch1Pos(InputAction.CallbackContext context);
        void OnTouch2Pos(InputAction.CallbackContext context);
    }
}
